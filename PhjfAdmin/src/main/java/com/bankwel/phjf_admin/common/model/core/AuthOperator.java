package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.framework.core.util.DataLoader;
import com.bankwel.framework.support.codis.RedisClient;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheAuthOperator;
import com.jfinal.kit.PropKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AuthOperator extends CacheAuthOperator<AuthOperator>{
	public static final AuthOperator dao = new AuthOperator().dao();

	private AuthBranch branch = null;

	public AuthOperator saveOrUpdate(AuthOperator model){
		if (model.getSeq_uuid() != null){
			model.update();
		} else {
			model.setSeq_uuid(UUID.randomUUID().toString());
			model.save();
		}
		flashCatch(model);
		return model;
	}
	public AuthOperator getOperatorById(final String seq_uuid) {
		String sql = "select * " +
				"       from auth_operator opt " +
				"      where opt.seq_uuid = ? " +
				"        and opt.status = 1 " +
				"      limit 1 ";
		return AuthOperator.dao.use("DBPublic").findFirst(sql,seq_uuid);
	}

	public Pair<List<Record>,PageKit<Record>> queryAuthOperatorByPage(String branch_seq_id,AuthOperator model, PageKit page){
		String sql = "select opt.seq_id " +
				"            , opt.seq_uuid " +
				"            , opt.operate_name " +
				"            , opt.true_name " +
				"            , opt.email " +
				"            , opt.mobile " +
				"            , opt.opt_type " +
				"            , branch.name branch_name " +
				"       from auth_operator opt " +
				"            left join auth_branch branch on branch.seq_id = opt.branch_seq_id " +
				"        where opt.status = 1 ";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(branch_seq_id)){
			sql += " and branch.treepath in ( SELECT treepath FROM auth_branch where treepath LIKE concat('%',(SELECT treepath FROM auth_branch WHERE seq_id = ? LIMIT 1),'%') ) ";
			params.add(branch_seq_id);
		}
		if (F.validate.isNotEmpty(model.getTrue_name())){
			sql += " and opt.true_name like concat('%',?,'%') ";
			params.add(model.getTrue_name());
		}
		if (F.validate.isNotEmpty(model.getBranch_seq_id())){
			sql += " and branch.treepath like concat('%',?,'%') ";
			params.add(model.getBranch_seq_id());
		}
		if (F.validate.isNotEmpty(model.getOpt_type())){
			sql += " and opt.opt_type like concat('%',?,'%') ";
			params.add(model.getOpt_type());
		}

		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	public void deleteOperatorById(String seq_uuid){
		AuthOperator aop = AuthOperator.dao.getOperatorById(seq_uuid);
		aop.setStatus("4");
		aop.update();
		flashCatch(aop);
	}

	public AuthOperator getAuthOperator(String operator_name, String password){
		String sql = "select seq_id,operate_name,branch_seq_id,apply_center_seq_id,mobile " +
				"       from auth_operator " +
				"      where operate_name = ? " +
				"        and password = ? " +
				"      limit 1 ";
		return AuthOperator.dao.use("DBPublic").findFirst(sql, operator_name, password);
	}
	public AuthOperator getAuthOperatorMobile(String operator_name, String password){
		String sql = "select seq_id,operate_name,mobile " +
				"       from auth_operator " +
				"      where operate_name = ? " +
				"        and password = ? " +
				"      limit 1 ";
		return AuthOperator.dao.use("DBPublic").findFirst(sql, operator_name, password);
	}

	public AuthBranch findBranch(){
		if (F.validate.isEmpty(this.branch)){
			this.branch = AuthBranch.dao.findById(""+this.getBranch_seq_id());
		}
		return branch;
	}

	public AuthOperator getOperatorBySeqId(final String seq_id) {
		String sql = "select * " +
				"       from auth_operator " +
				"      where seq_id = ? " +
				"        and status = 1 " +
				"      limit 1 ";
		return AuthOperator.dao.use("DBPublic").findFirst(sql,seq_id);
	}
	public List<SysApplyCenter> findApplyList(String operator_seq_id){
		String sql = "select distinct apply.seq_id apply_seq_id ," +
                "                     apply.name apply_name " +
				"       from auth_operator_auth auth" +
                "      inner join auth_branch_apply bapp on auth.branch_seq_id = bapp.branch_seq_id and bapp.apply_center_seq_id = auth.apply_center_seq_id and bapp.status = 1" +
                "      inner join sys_apply_center apply on bapp.apply_center_seq_id = apply.seq_id and apply.status =1" +
                "      where auth.operator_seq_id = ? " +
				"        and auth.status = 1 ";
		return SysApplyCenter.dao.use("DBPublic").find(sql,operator_seq_id);
	}

	public List<AuthBranch> queryBranchList(String operator_seq_id){
		String sql = "select distinct branch.seq_id branch_seq_id ," +
				"                     branch.name branch_name " +
				"       from auth_operator_auth auth" +
				"      inner join auth_branch branch on auth.branch_seq_id = branch.seq_id " +
				"             and (branch.parent_seq_id = 1 or branch.parent_seq_id = 0) " +
				"             and branch.status =1" +
				"      where auth.operator_seq_id = ? " +
				"        and auth.status = 1 ";
		return AuthBranch.dao.use("DBPublic").find(sql,operator_seq_id);
	}

	/**
	 * 检验业务对象是否为空
	 * @return
	 */
	public boolean isEmpty(){
		if(F.validate.isEmpty(this.getSeq_uuid())){
			return true;
		}
		return false;
	}

	/**
	 * @Title:
	 * @Description: 获取token
	 * @author: DukeMr.Chen
	 */
	public String getToken(final String seq_id) {
		return RedisClient.getClient().get(PropKit.use("config.properties").get("phjf.catch.sys.patch") + seq_id
				, String.class
				, new DataLoader(){
					public Object load() throws Exception{
						String sql = "select token" +
								"       from auth_operator " +
								"      where seq_id = ? " +
								"      limit 1 ";
						return Db.use("DBPublic").findFirst(sql, seq_id).get("token");
					}
				});
	}

}

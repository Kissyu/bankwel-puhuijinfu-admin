package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.model.core.base.BaseBankType;
import com.bankwel.phjf_admin.component.c13webtag.bootstrap.DynamicSelectData;
import com.bankwel.phjf_admin.component.c13webtag.bootstrap.IDynamicSelectData;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheBankType;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;
import sun.misc.Cache;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class BankType extends CacheBankType<BankType> {
	public static final BankType dao = new BankType().dao();

	/**
	 * 保存或修改银行类型
	 * @param opt
	 * @return
     */
	public BankType saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if (this.getSeq_uuid() != null){
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			if(F.validate.isEmpty(this.getIs_show())){
				this.setIs_show("Y");
			}
			this.update();
		} else {
			if (F.validate.isEmpty(this.getBt_code())){
				this.setBt_code(SysSeq.dao.generatorBankTypeCode());
			}
			this.setSeq_uuid(UUID.randomUUID().toString());
			this.setIs_show("Y");
			this.setStatus("1");
			this.setCreate_opt(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}

	public void checkModelItem() {
		//check
		this.checkBt_code("银行类型编码");
		this.checkLanguage("语言");
		this.checkName("银行类型名称");
		this.checkBt_logo("银行类型logo");
		this.checkBt_card_bgimg("二类户银行卡背景图片");
		this.checkBt_card_img("二类户银行卡开户图片");
		this.checkService_telephone("银行客服电话");
		this.checkOpencard_need_material("银行开户所需材料");
		this.checkRemark("银行卡备注");
		this.checkOrder_num("银行卡序号");
	}
	/**
	 * 获取银行机构列表
	 * @param name
	 * @param status
	 * @param language
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> queryBankTypeByPage(String name, String status,String language, PageKit page){
		String sql = "select bt.seq_uuid," +
				"            bt.bt_id," +
				"            bt.bt_code," +
				"            bt.name," +
				"            bt.bt_logo," +
				"            bt.bt_card_bgimg," +
				"            bt.bt_card_img," +
				"            bt.opencard_need_material," +
				"            bt.service_telephone," +
				"            bt.remark," +
				"            bt.order_num," +
				"            bt.status," +
				"            bt.is_show," +
				"            bt.create_time," +
				"            status.name status_show," +
				"            isShow.name is_show_name" +
				"       from phjf_bank_type bt" +
				"            left join sys_datalibrary status on status.parent_code = 'sys_status' and status.code = bt.status" +
				"            left join sys_datalibrary isShow on isShow.parent_code = 'sys_isShow' and isShow.code = bt.is_show" +
				"      where 1=1";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(name)){
			sql += " and (bt.name LIKE concat('%',?,'%') or bt.bt_code = ?)";
			params.add(name);
			params.add(name);
		}
		if (F.validate.isNotEmpty(status)){
			sql += " and bt.status = ? ";
			params.add(status);
		}
		if (F.validate.isNotEmpty(language)){
			sql += " and bt.language = ? ";
			params.add(language);
		}
		sql += " order by bt.order_num";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	public List<IDynamicSelectData> querySelectData(){
		String sql = "select * " +
				"       from phjf_bank_type " +
				"      where is_show = 'Y' " +
				"        and status = '1' ";
		List<BankType> list = dao.use("DBPublic").find(sql);
		List<IDynamicSelectData> selectData = new ArrayList<IDynamicSelectData>();
		for (BankType bankType : list){
			IDynamicSelectData sd = new DynamicSelectData();
			sd.setId(bankType.getBt_code());
			sd.setName(bankType.getName());
			selectData.add(sd);
		}
		return selectData;
	}

	/**
	 * 通过银行类型代码获取银行类型
	 * @param bt_code
	 * @return
     */
	public BankType findByCode(String bt_code, String language){
		String sql = "select * " +
				"       from phjf_bank_type " +
				"      where bt_code = ? " +
				"        and language = ? " +
				"        and status = 1 " +
				"      limit 1 ";
		BankType data = dao.use("DBPublic").findFirst(sql, bt_code, language);
		if (F.validate.isEmpty(data)){
			data = new BankType();
		}
		return data;
	}

	/**
	 * 通过ID获取银行类型
	 * @param seq_uuid
	 * @return
	 */
	public BankType findById(String seq_uuid){
		String sql = "select * " +
				"       from phjf_bank_type " +
				"      where seq_uuid = ? " +
				"      limit 1 ";
		BankType data = dao.use("DBPublic").findFirst(sql, seq_uuid);
		if (F.validate.isEmpty(data)){
			data = new BankType();
		}
		return data;
	}

	/**
	 * 通过名称查找银行类型
	 * @param name
	 * @return
	 */
	public BankType findByName(String name){
		String sql = "select * " +
				"       from phjf_bank_type " +
				"      where name = ? " +
				"        and status = 1" +
				"      limit 1 ";
		return dao.use("DBPublic").findFirst(sql, name);
	}

	/**
	 * 判断该银行类型名称是否存在
	 * @param seq_uuid
	 * @param name
	 * @return
	 */
	public Boolean isHaveBtName(String seq_uuid,String name){
		String sql = "select * " +
				"       from phjf_bank_type " +
				"      where seq_uuid != ?" +
				"        and name = ? " +
				"        and status = 1 ";
		BankType bt = BankType.dao.use("DBPublic").findFirst(sql,seq_uuid,name);
		if(F.validate.isEmpty(bt)){
			return false;
		}
		return true;
	}

	/**
	 * 获取语言的中文名
	 * @return
	 */
	public String findLanguage_show(){
		SysDatalibrary library = SysDatalibrary.dao.queryDatalibrary("Phjf", "sys_language", this.getLanguage());
		return library.getName();
	}
}

package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.GeoHashKit;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.constants.admin.AdminConstants;
import com.bankwel.phjf_admin.common.model.core.base.BaseBankInfo;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheBankInfo;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class BankInfo extends CacheBankInfo<BankInfo> {
	public static final BankInfo dao = new BankInfo().dao();

	private BankType bankType;

	/**
	 * 保存或修改银行机构
	 * @param opt
	 * @return
	 */
	public BankInfo saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if(F.validate.isNotEmpty(this.getLat())&&F.validate.isNotEmpty(this.getLng())){
			this.setGeohash(GeoHashKit.encode(this.getLat(),this.getLng()));
		}
		if (this.getSeq_uuid() != null){
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			if(F.validate.isEmpty(this.getIs_show())){
				this.setIs_show("Y");
			}
			this.update();
		} else {
			if (F.validate.isEmpty(this.getBank_code())){
				this.setBank_code(SysSeq.dao.generatorBankCode());
			}
			this.setSeq_uuid(UUID.randomUUID().toString());
            this.setBank_id(null);
			this.setIs_show("Y");
			this.setStatus("1");
			this.setCreate_opt(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}

	public void checkModelItem() {
		this.checkBank_code("银行网点编码");
		this.checkLanguage("语言");
		this.checkBt_code("银行网点所属银行");
		this.checkThird_bank_code("第三方银行编码");
		this.checkName("银行网点名称");
		this.checkParent_bank_code("上级银行网点编码");
		this.checkBank_path("银行层级路径");
		this.checkLat("银行网点所在纬度");
		this.checkLng("银行网点所在经度");
		this.checkContact("银行网点联系人");
		this.checkAddress("银行网点地址");
		this.checkEmail("银行网点邮箱");
		this.checkTelephone("银行网点固定电话");
		this.checkMobilephone("银行网点移动电话");
		this.checkRemark("银行网点备注");
	}

	/**
	 * 获取银行机构列表
	 *
	 * @param bt_name
	 * @param name
	 * @param status
	 * @param isConfirm
	 * @param language
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> queryBankInfoByPage(String bt_name, String name, String status, String isConfirm, String language, PageKit page){
		String sql = "select bank.seq_uuid," +
				"            bank.bank_id," +
				"            bank.bank_code," +
				"            bank.third_bank_code," +
				"            bank.bt_code," +
				"            bank.name," +
				"            bank.parent_bank_code," +
				"            bank.bank_path," +
				"            bank.contact," +
				"            bank.address," +
				"            bank.telephone," +
				"            bank.mobilephone," +
				"            bank.remark," +
				"            bank.email," +
				"            bank.status," +
				"            bank.is_confirm," +
				"            bank.is_show," +
				"            bank.create_time," +
				"            bt.name bt_name," +
				"            status.name status_show," +
				"            isConfirm.name isConfirm_show," +
				"            isShow.name is_show_name," +
				"            pbank.name parent_bank_name" +
				"       from phjf_bank_info bank" +
				"            left join phjf_bank_type bt on bank.bt_code = bt.bt_code and bt.language = bank.language" +
				"            left join phjf_bank_info pbank on bank.parent_bank_code = pbank.bank_code and bank.language = pbank.language" +
				"            left join sys_datalibrary status on status.parent_code = 'sys_status' and status.code = bank.status" +
				"            left join sys_datalibrary isShow on isShow.parent_code = 'sys_isShow' and isShow.code = bank.is_show" +
				"            left join sys_datalibrary isConfirm on isConfirm.parent_code = 'sys_isConfirm' and isConfirm.code = bank.is_confirm" +
				"      where 1=1";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(bt_name)){
			sql += " and (bt.name LIKE concat('%',?,'%') or bank.bt_code = ?)";
			params.add(bt_name);
			params.add(bt_name);
		}
		if (F.validate.isNotEmpty(name)){
			sql += " and (bank.name LIKE concat('%',?,'%') or bank.bank_code = ?)";
			params.add(name);
			params.add(name);
		}
		if (F.validate.isNotEmpty(status)){
			sql += " and bank.status = ? ";
			params.add(status);
		}
		if (F.validate.isNotEmpty(isConfirm)){
			sql += " and bank.is_confirm = ? ";
			params.add(isConfirm);
		}
		if (F.validate.isNotEmpty(language)){
			sql += " and bt.language = ? ";
			params.add(language);
		}
		sql += " order by bank.create_time desc";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}
	/**
	 * 通过银行代码获取银行
	 * @param bank_code
	 * @param language
     * @return
     */
	public BankInfo findByCode(String bank_code, String language){
		String sql = "select * " +
				"       from phjf_bank_info " +
				"      where bank_code = ? ";
		List params = new ArrayList<String>();
		params.add(bank_code);
		if (F.validate.isNotEmpty(language)){
			sql += "     and language = ? ";
			params.add(language);
		}
		sql += "       limit 1 ";
		BankInfo bankInfo = dao.use("DBPublic").findFirst(sql, params.toArray());
		if (F.validate.isEmpty(bankInfo)){
			bankInfo = new BankInfo();
		}
		return bankInfo;
	}

	/**
	 * 通过银行机构代码获取银行机构
	 * @param bank_code
	 * @param language
	 * @return
	 */
	public BankInfo findBankInfo(String bank_code, String language) {
		String sql = "select * " +
				"       from phjf_bank_info " +
				"      where bank_code = ? " +
				"        and language = ? " +
				"        and status = 1 " +
				"      limit 1 ";
		BankInfo data = BankInfo.dao.use("DBPublic").findFirst(sql,bank_code, language);
		if(F.validate.isEmpty(data)){
			data = new BankInfo();
		}
		return data;
	}

	public List<BankInfo> queryAllBank(String language) {
		String sql = "select * " +
				"       from phjf_bank_info " +
				"      where language = ? " +
				"        and status = 1 " +
				"        and is_show = 'Y' ";
		List<BankInfo> data = BankInfo.dao.use("DBPublic").find(sql, language);
		if (F.validate.isEmpty(data)) {
			data = new ArrayList<BankInfo>();
		}

		return data;
	}

	/**
	 * 检验业务对象是否为空
	 * @return
	 */
	public boolean isEmpty(){
		if(F.validate.isEmpty(this.getSeq_uuid())){
			return true;
		}
		return false;
	}

	/**
	 * 通过ID获取银行机构
	 * @param seq_uuid
	 * @return
	 */
	public BankInfo findById(String seq_uuid){
		String sql = "select * " +
				"       from phjf_bank_info " +
				"      where seq_uuid = ? " +
				"      limit 1 ";
		BankInfo data = dao.use("DBPublic").findFirst(sql, seq_uuid);
		if (F.validate.isEmpty(data)){
			data = new BankInfo();
		}
		return data;
	}

	/**
	 * 通过名称查找银行机构
	 * @param name
	 * @return
	 */
	public BankInfo findByName(String name){
		String sql = "select * " +
				"       from phjf_bank_info " +
				"      where name = ? " +
				"        and status = 1" +
				"      limit 1 ";
		return dao.use("DBPublic").findFirst(sql, name);
	}

	/**
	 * 获取银行类型
	 * @return
     */
	public BankType findBankType(){
		if (F.validate.isEmpty(bankType)){
			bankType = BankType.dao.findByCode(this.getBt_code(),AdminConstants.ZH_SIMP);
		}
		return bankType;
	}

	/**
	 * 判断该银行机构名称是否存在
	 * @param seq_uuid
	 * @param name
	 * @return
	 */
	public Boolean isHaveBtName(String seq_uuid,String name){
		String sql = "select * " +
				"       from phjf_bank_info " +
				"      where seq_uuid != ?" +
				"        and name = ? " +
				"        and status = 1 ";
		BankInfo bank = BankInfo.dao.use("DBPublic").findFirst(sql,seq_uuid,name);
		if(F.validate.isEmpty(bank)){
			return false;
		}
		return true;
	}

	/**
	 * 获取语言的中文名
	 * @return
	 */
	public String findLanguage_show(){
		SysDatalibrary library = SysDatalibrary.dao.queryDatalibrary("Phjf", "sys_language", this.getLanguage());
		return library.getName();
	}

	/**
	 * 获取上级银行网点名称
	 * @return
	 */
	public String findParentBankName(){
		BankInfo bankInfo = BankInfo.dao.findBankInfo(this.getParent_bank_code(), AdminConstants.ZH_SIMP);
		return  bankInfo.getName();
	}
}

package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.AppReqHeader;
import com.bankwel.framework.core.util.DataLoader;
import com.bankwel.framework.core.util.Empty;
import com.bankwel.framework.support.codis.RedisClient;
import com.bankwel.phjf_admin.support.FlowControlKit;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheSmsCode;
import com.bankwel.phjf_baseModel.common.model.phjf.enumKey.ApiSmsCodeEnum;

import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class SmsCode extends CacheSmsCode<SmsCode> implements Empty {
	public static final SmsCode dao = new SmsCode().dao();

//	public static String CK_Phjf_Model_SmsCode_KEY1 = CatchKeyConst.CK_Phjf_Model_SmsCode +".mobilephone:%s|type:%s";
//	public static String CK_Phjf_Model_SmsCode_KEY2 = CatchKeyConst.CK_Phjf_Model_SmsCode +".mobilephone:%s|type:%s|create_time:%s";

	/**
	 * 查询有效验证码
	 * @param mobilephone
	 * @param type
	 * @return
	 */
	public SmsCode findByMobile(final String mobilephone, final String type) {
		SmsCode data = (SmsCode) RedisClient.getClient().get(F.strKit.f(ApiSmsCodeEnum.CK_Phjf_Model_SmsCode_KEY1.getKey(), mobilephone,type), 3600,SmsCode.class, new DataLoader() {
			public Object load() throws Exception {
				return ((SmsCode)SmsCode.dao.use("DBPublic")).findFirst("SELECT * FROM phjf_sms_code WHERE mobilephone = ? and type = ? and now() between create_time and exp_time and status =1 order by create_time desc LIMIT 1", new Object[]{mobilephone, type});
			}
		});
		if(F.validate.isEmpty(data)){
			data = new SmsCode();
		}
		return data;
	}

	/**
	 * 检验三天以内是否已经发送过验证码
	 * @param mobilephone
	 * @param type
	 * @return
	 */
	public SmsCode checkIsSendCode(final String mobilephone, final String type) {
		final String sql = "SELECT * " +
				"             FROM phjf_sms_code " +
				"            WHERE mobilephone = ?  " +
				"              and type = ? " +
				"              and status = 2 " +
				"              and (NOW() between create_time and DATE_ADD(create_time,INTERVAL '72:00:00' HOUR_SECOND))\n" +
				"              LIMIT 1 ";
		SmsCode data = (SmsCode) RedisClient.getClient().get(F.strKit.f(ApiSmsCodeEnum.CK_Phjf_Model_SmsCode_KEY1.getKey(), mobilephone,type), 3600,SmsCode.class, new DataLoader() {
			public Object load() throws Exception {
				return ((SmsCode)SmsCode.dao.use("DBPublic")).findFirst(sql, new Object[]{mobilephone, type});
			}
		});
		if(F.validate.isEmpty(data)){
			data = new SmsCode();
		}
		return data;
	}

	/**
	 * 保存短信验证码
	 * @param type
	 * @param mobilephone
	 * @param content
	 * @param code
	 * @return
	 */
	public SmsCode addSmsCode(String type, String mobilephone, String content, String code) throws MsgBusinessException {
		SmsCode smsCode = new SmsCode();
		smsCode.setType(type);
		smsCode.setMobilephone(mobilephone);
		smsCode.setContent(content);
		smsCode.setCode(code);
		smsCode.setExp_time(F.dateKit.addMin(new Date(), 15, F.dateKit.PATTERN_All));
		smsCode.checkModelItem(smsCode);
		smsCode.saveOrUpdate();
		return smsCode;
	}
//
	public void checkModelItem(SmsCode smsCode){
		smsCode.checkCode_id("短信验证码ID");
		smsCode.checkType("来源类型");
		smsCode.checkMobilephone("电话号码");
		smsCode.checkContent("短信内容");
		smsCode.checkCode("验证码");
		smsCode.checkExp_time("失效时间");
	}
	/**
	 * 检查是否在60秒内
	 * @param type
	 * @param mobilephone
	 * @return
	 */
	public boolean isCanSend(String type, String mobilephone) {
		String beginDate = F.dateKit.translate2Str(F.dateKit.addSecond(new Date(), -60, F.dateKit.PATTERN_All), F.dateKit.PATTERN_All);
		List codes = queryByBegin(mobilephone, type, beginDate);
		return !F.validate.isNotEmpty(codes);
	}

	public List<SmsCode> queryByBegin(final String mobilephone, final String type, final String beginDate) {
		List data = (List) RedisClient.getClient().get(F.strKit.f(ApiSmsCodeEnum.CK_Phjf_Model_SmsCode_KEY2.getKey(), mobilephone,type,beginDate), RedisClient.EXRP_MINUTE*15,SmsCode.class, new DataLoader() {
			public Object load() throws Exception {
				return ((SmsCode)SmsCode.dao.use("DBPublic")).find("SELECT * FROM phjf_sms_code WHERE mobilephone = ? and type = ? and create_time >= ? and status =1 ", new Object[]{mobilephone, type, beginDate});
			}
		});
		return data;
	}

	public List<SmsCode> querySmsCodeList() {
		String sql = "SELECT * FROM phjf_sms_code order by create_time desc ";
		return SmsCode.dao.use("DBPublic").find(sql);
	}


	public SmsCode saveOrUpdate() {
		if(this.isEmpty()) {
			this.setSeq_uuid(F.randomKit.randomUUID());
			this.save();
		} else {
			this.update();
		}
		this.flashCatch(this);
		return this;
	}
//
//	/**
//	 * 清空缓存
//	 * @param data
//	 * @return
//	 */
//	public static boolean flashCatch(SmsCode data){
//		RedisClient.getClient().delKeysLike(F.strKit.f(CK_Phjf_Model_SmsCode_KEY1,data.getMobilephone(),data.getType()));
//		return true;
//	}


	//---------------------------------------------------------- 业务快捷方法   Start

	/**
	 * 检验业务对象是否为空
	 * @return
	 */
	public boolean isEmpty(){
		if(F.validate.isEmpty(this.getSeq_uuid())){
			return true;
		}
		return false;
	}

	/**
	 * 检验验证码是否可以使用
	 * @param mobiphone
	 * @param type
	 * @param code
	 * @throws MsgBusinessException
	 */
	public boolean checkCode(String mobiphone, String type, String code) throws MsgBusinessException {
		//验证 验证码是否正确
		SmsCode smsCode = SmsCode.dao.findByMobile(mobiphone, type);
		if(smsCode.isEmpty()){
			throw new MsgBusinessException("请重新获取验证码");
		}
		FlowControlKit.ruleSmsValidateAttack(smsCode);
		if(F.validate.isNotEquals(smsCode.getCode(),code)){
			throw new MsgBusinessException("验证码输入错误");
		}
		//更改验证码为已使用状态
		smsCode.used();
		return true;
	}

	/**
	 * 标记为已使用
	 */
	public void used(){
		this.setStatus("2");
		this.saveOrUpdate();
	}

	//---------------------------------------------------------- 业务快捷方法   End
}

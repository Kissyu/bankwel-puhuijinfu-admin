package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.model.core.base.BaseAuthRole;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheAuthRole;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AuthRole extends CacheAuthRole<AuthRole> {
	public static final AuthRole dao = new AuthRole().dao();

	/**
	 * 新增或修改角色
	 * @param model
	 * @return
	 */
	public AuthRole saveOrUpdate(AuthRole model){
		if (model.getSeq_uuid() != null){
			model.update();
		} else {
			model.setSeq_uuid(UUID.randomUUID().toString());
			model.save();
		}
		return model;
	}

	/**
	 * 通过ID获取角色
	 * @param seq_uuid
	 * @return
	 */
	public AuthRole getById(String seq_uuid){
		String sql = "select * " +
				"       from auth_role " +
				"       where seq_uuid = ? " +
				"         and status = 1 " +
				"       limit 1";
		return AuthRole.dao.use("DBPublic").findFirst(sql,seq_uuid);
	}

	/**
	 * 通过seq_id获取角色
	 * @param seq_id
	 * @return
	 */
	public AuthRole findByseqId(String seq_id){
		String sql = "select * " +
				"       from auth_role " +
				"       where seq_id = ? " +
				"         and status = 1 " +
				"       limit 1";
		return AuthRole.dao.use("DBPublic").findFirst(sql,seq_id);
	}

	/**
	 * 获取角色列表
	 * @param operator_seq_id
	 * @param name
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> queryRoleByPage(String operator_seq_id, String name, PageKit page){
		List params = new ArrayList();
		String sql = "select distinct role.seq_uuid," +
				"            role.seq_id," +
				"            role.name," +
				"            role.apply_center_seq_id," +
				"            role.remark," +
				"            library.name status_show" +
				"       from auth_operator_auth auth" +
				"      inner join auth_branch_apply bapp on auth.branch_seq_id = bapp.branch_seq_id and bapp.status = 1" +
				"      inner join auth_role role on bapp.apply_center_seq_id = role.apply_center_seq_id and role.status = 1" +
				"      left join sys_datalibrary library on library.parent_code = 'sys_status' and library.code = role.status " +
				"      where auth.operator_seq_id = ? " +
				"        and auth.status = 1 " +
				"        and role.seq_id != 1";
		params.add(operator_seq_id);
		if (F.validate.isNotEmpty(name)){
			sql += " and role.name LIKE concat('%',?,'%') ";
			params.add(name);
		}
        return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	/**
	 * 获取所有角色
	 * @return
	 */
	public List<AuthRole> findAll() {
		String sql = "select * " +
				"       from auth_role " +
				"      where status = 1 ";
		return AuthRole.dao.use("DBPublic").find(sql);
	}

	/**
	 * 判断角色是否有分配资源权限
	 * @param user
	 * @param role_seq_id
	 * @return
	 */
	public boolean isHaveAllotModiAuth(AuthOperator user, String role_seq_id){
		AuthOperator loginUser = AuthOperator.dao.getOperatorBySeqId(user.getSeq_id()+"");
		AuthRole authRole = AuthRole.dao.findByseqId(role_seq_id);
		AuthOperator create_role_opt = AuthOperator.dao.getOperatorBySeqId(authRole.getCreate_opt()+"");
//		user.getBranch_seq_id().equals(user.getBranch_seq_id());
		return loginUser.getBranch_seq_id()==create_role_opt.getBranch_seq_id();
	}
}

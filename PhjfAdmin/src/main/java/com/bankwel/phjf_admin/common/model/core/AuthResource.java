package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.framework.core.util.DataLoader;
import com.bankwel.framework.support.codis.RedisClient;
import com.bankwel.phjf_admin.common.model.core.base.BaseAuthResource;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheAuthResource;
import com.bankwel.phjf_baseModel.common.model.phjf.enumKey.AuthResourceEnum;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AuthResource extends CacheAuthResource<AuthResource> {
	public static final AuthResource dao = new AuthResource().dao();

	/**
	 * 新增或更新资源
	 * @param model
	 * @return
	 */
	public AuthResource saveOrUpdate(AuthResource model){
		if (model.getSeq_uuid() != null){
			model.update();
		} else {
			model.setSeq_uuid(UUID.randomUUID().toString());
			model.save();
		}
		flashCatch(model);
		return model;
	}

	/**
	 * 通过ID获取资源
	 * @param seq_uuid
	 * @return
	 */
	public AuthResource getById(String seq_uuid){
		String sql = "SELECT * " +
				"       FROM auth_resource " +
				"       where seq_uuid = ? " +
				"         and status = 1 " +
				"       limit 1";
		return AuthResource.dao.use("DBPublic").findFirst(sql,seq_uuid);
	}

	/**
	 * 通过名称和url获取资源
	 * @param name
	 * @param url
	 * @return
	 */
	public AuthResource getByNameUrl(String name,String url){
		String sql = "SELECT * " +
				"       FROM auth_resource " +
				"       where name = ? " +
				"         and url = ? " +
				"         and status = 1 " +
				"       limit 1";
		return AuthResource.dao.use("DBPublic").findFirst(sql,name,url);
	}

	/**
	 * 通过seq_id获取资源
	 * @param seq_id
	 * @return
	 */
	public AuthResource getBySeqId(String seq_id){
		String sql = "SELECT * " +
				"       FROM auth_resource " +
				"       where seq_id = ? " +
				"         and status = 1 " +
				"       limit 1";
		return AuthResource.dao.use("DBPublic").findFirst(sql,seq_id);
	}

	/**
	 * 获取资源列表
	 * @param operator_seq_id
	 * @param name
	 * @param url
	 * @param type
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> queryResourceByPage(String operator_seq_id, String name, String url, String type, PageKit page){
		String sql = "select distinct res.seq_uuid," +
				"            res.seq_id," +
				"            res.name," +
				"            res.type," +
				"            res.url," +
				"            res.apply_center_seq_id," +
				"            res.remark," +
				"            res.opt_target," +
				"            res.opt_content," +
				"            res.treepath as treepath," +
				"            library.name status_show, " +
				"            lib.name type_show, " +
				"            pres.name parent_name, " +
				"            acen.name center_name " +
				"       from auth_operator_auth auth" +
				"      inner join auth_branch_apply bapp on auth.branch_seq_id = bapp.branch_seq_id and bapp.status = 1 " +
				"      inner join auth_resource res on bapp.apply_center_seq_id = res.apply_center_seq_id and res.status = 1 " +
				"      left join sys_apply_center acen on acen.seq_id = res.apply_center_seq_id " +
				"      left join sys_datalibrary library on library.parent_code = 'sys_status' and library.code = res.status " +
				"      left join sys_datalibrary lib on lib.parent_code = 'sys_resourceType' and lib.code = res.type " +
				"      left join auth_resource pres on res.parent_seq_id = pres.seq_id and pres.status = 1 " +
				"      where auth.operator_seq_id = ? " +
				"        and auth.status = 1 ";
		List params = new ArrayList();
		params.add(operator_seq_id);
		if (F.validate.isNotEmpty(name)){
			sql += " and res.name LIKE concat('%',?,'%') ";
			params.add(name);
		}
		if (F.validate.isNotEmpty(url)){
			sql += " and res.url LIKE concat('%',?,'%') ";
			params.add(url);
		}
		if (F.validate.isNotEmpty(type)&&type!="service"){
			sql += " and res.type LIKE concat('%',?,'%') ";
			params.add(type);
		}
		if(F.validate.isEmpty(type)||type.equals("service")){
			sql += " union " +
					" select distinct ser.seq_uuid," +
					"        ser.seq_id," +
					"        ser.name," +
					"        'service'," +
					"        ser.url," +
					"        ser.apply_center_seq_id," +
					"        ser.remark," +
					"        ser.opt_target," +
					"        ser.opt_content," +
					"        sres.treepath as treepath," +
					"        library.name status_show, " +
					"        lib.name type_show," +
					"        sres.name parent_name, " +
					"        acen.name center_name " +
					" from auth_operator_auth auth" +
					"      inner join auth_branch_apply bapp on auth.branch_seq_id = bapp.branch_seq_id and bapp.status = 1" +
					"      inner join auth_service ser on bapp.apply_center_seq_id = ser.apply_center_seq_id and ser.status = 1" +
					"      inner join auth_resource_service res_ser on ser.seq_id = res_ser.service_seq_id" +
					"      left join sys_datalibrary library on library.parent_code = 'sys_status' and library.code = ser.status " +
					"      left join sys_datalibrary lib on lib.parent_code = 'sys_resourceType' and lib.code = 'service' " +
					"      left join auth_resource sres on sres.seq_id = res_ser.type_seq_id " +
					"      left join sys_apply_center acen on acen.seq_id = sres.apply_center_seq_id " +
					"      where auth.operator_seq_id = ? " +
					"        and auth.status = 1 ";
			params.add(operator_seq_id);
			if (F.validate.isNotEmpty(name)){
				sql += " and ser.name LIKE concat('%',?,'%') ";
				params.add(name);
			}
			if (F.validate.isNotEmpty(url)){
				sql += " and ser.url LIKE concat('%',?,'%') ";
				params.add(url);
			}
		}
		sql += " order by treepath asc ";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	/**
	 * 获取所有可分配资源
	 * @param operator_seq_id
	 * @return
	 */
	public List<AuthResource> queryAllAllotResource(String operator_seq_id, String apply_center_id){
		String sql = "select distinct res.seq_uuid," +
				"            res.seq_id," +
				"            res.name," +
				"            res.parent_seq_id"+
				"       from auth_operator_auth auth" +
				"      inner join auth_branch_apply bapp on auth.branch_seq_id = bapp.branch_seq_id and bapp.status = 1" +
				"      inner join auth_resource res on bapp.apply_center_seq_id = res.apply_center_seq_id and res.is_allot = 'Y' and res.status = 1" +
				"      where auth.operator_seq_id = ? " +
				"        and auth.apply_center_seq_id = ? " +
				"        and auth.status = 1 " +
				" union " +
				"     select distinct ser.seq_uuid," +
				"            ser.seq_id," +
				"            ser.name," +
				"            res_ser.type_seq_id"+
				"       from auth_operator_auth auth" +
				"      inner join auth_branch_apply bapp on auth.branch_seq_id = bapp.branch_seq_id and bapp.status = 1" +
				"      inner join auth_service ser on bapp.apply_center_seq_id = ser.apply_center_seq_id and ser.status = 1" +
				"      inner join auth_resource_service res_ser on ser.seq_id = res_ser.service_seq_id" +
				"      where auth.operator_seq_id = ? " +
				"        and auth.apply_center_seq_id = ? " +
				"        and auth.status = 1 ";
		return AuthResource.dao.use("DBPublic").find(sql,operator_seq_id, apply_center_id, operator_seq_id, apply_center_id);
	}

	/**
	 * 获取首页左侧菜单资源列表
	 * @param operator_seq_id
	 * @param apply_center_seq_id
	 * @param branch_seq_id
	 * @return
	 */
	public List<AuthResource> queryResourceList(String operator_seq_id,String apply_center_seq_id, String branch_seq_id){
		String sql = "select distinct ar.name " +
				"            , ar.url " +
				"            , ar.seq_id " +
				"            , ar.parent_seq_id " +
				"            , ar.level " +
				"		from auth_operator_auth aoa " +
				"            , auth_branch_apply bapp " +
				"            , auth_role_resource arr " +
				"            , auth_resource ar " +
				"      where aoa.branch_seq_id = bapp.branch_seq_id " +
				"        and aoa.role_seq_id = arr.role_seq_id " +
				"        and arr.resource_seq_id = ar.seq_id " +
				"        and aoa.operator_seq_id = ? " +
				"        and aoa.apply_center_seq_id = ? " +
				"        and aoa.branch_seq_id = ? " +
				"        and ar.type = 'menu' " +
				"        and aoa.status = 1 " +
				"        and bapp.status = 1" +
				"        and arr.status = 1" +
				"        and ar.status = 1" +
				"      order by ar.`level`, CONVERT(ar.order_no,SIGNED) asc";
		return AuthResource.dao.use("DBPublic").find(sql , operator_seq_id,apply_center_seq_id,branch_seq_id);
	}

	/**
	 * 用户是否有权限访问链接地址
	 * @param operator
	 * @param resource_url
	 * @return
	 */
	public boolean isHandleAuth(AuthOperator operator, String resource_url){
		String sql = "select ar.seq_uuid " +
				"		from auth_operator_auth aoa " +
				"            , auth_branch_apply bapp " +
				"            , auth_role_resource arr " +
				"            , auth_resource ar " +
				"      where aoa.branch_seq_id = bapp.branch_seq_id " +
				"        and aoa.role_seq_id = arr.role_seq_id " +
				"        and arr.resource_seq_id = ar.seq_id " +
				"        and aoa.operator_seq_id = ? " +
				"        and ar.url like concat(?,'%') " +
//				"        and aoa.apply_center_seq_id = ? " +
				"        and aoa.branch_seq_id = ? " +
				"        and aoa.status = 1 " +
				"        and bapp.status = 1 " +
				"        and arr.status = 1 " +
				"        and ar.status = 1 " +
				" union " +
				"     select ar.seq_uuid " +
				"		from auth_operator_auth aoa " +
				"            , auth_branch_apply bapp " +
				"            , auth_role_resource arr " +
				"            , auth_service ar " +
				"      where aoa.branch_seq_id = bapp.branch_seq_id " +
				"        and aoa.role_seq_id = arr.role_seq_id " +
				"        and arr.resource_seq_id = ar.seq_id " +
				"        and aoa.operator_seq_id = ? " +
				"        and ar.url like concat(?,'%') " +
//				"        and aoa.apply_center_seq_id = ? " +
				"        and aoa.branch_seq_id = ? " +
				"        and aoa.status = 1 " +
				"        and bapp.status = 1 " +
				"        and arr.status = 1 " +
				"        and ar.status = 1 ";

		AuthResource resource = AuthResource.dao.use("DBPublic").findFirst(sql, operator.getSeq_id(), resource_url, operator.getBranch_seq_id(),operator.getSeq_id(), resource_url, operator.getBranch_seq_id());
		if (F.validate.isEmpty(resource)){
			return false;
		}
		return true;
	}

	/**
	 * 检验业务对象是否为空
	 * @return
	 */
	public boolean isEmpty(){
		if(F.validate.isEmpty(this.getSeq_uuid())){
			return true;
		}
		return false;
	}

	/**
	 * @Title:
	 * @Description: 根据actionkey 获取资源
	 * @author: DukeMr.Chen
	 */
	public AuthResource getAuthResourceByUrl(final String url){
		AuthResource authResource = RedisClient.getClient().get(
				F.strKit.f(AuthResourceEnum.CK_PHJF_AUTHRESOURCE_URL.getKey(),url)
				,AuthResource.class, new DataLoader(){
					public Object load() throws Exception{
						String sql = "select * " +
								"       from auth_resource " +
								"      where status = '1' " +
								"        and url = ? ";
						return dao.use("DBPublic").findFirst(sql, url);
					}
				});
		return authResource;
	}

	/**
	 * @Title:
	 * @Description: 获取业务路径
	 * @author: DukeMr.Chen
	 */
    public List<AuthResource> getResourceTree(String idPath) {
		String sql = "SELECT * from auth_resource " +
				" where FIND_IN_SET(seq_id,?) " +
				" and `status`= '1'  " +
				" order by `level` ";
		return dao.use("DBPublic").find(sql, idPath);

    }
}

package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.model.core.base.BaseAppVersionInfo;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheAppVersionInfo;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AppVersionInfo extends CacheAppVersionInfo<AppVersionInfo> {
	public static final AppVersionInfo dao = new AppVersionInfo().dao();
	/**
	 * 保存或更新app版本
	 * @param opt
	 * @return
	 */
	public AppVersionInfo saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if (F.validate.isNotEmpty(this.getAvi_id()+"")&&!(this.getAvi_id().equals(0))){
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.update();
		} else {
			this.setSeq_uuid(UUID.randomUUID().toString());
			this.setIs_show("Y");
			this.setStatus("1");
			this.setCreate_opt(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}
	public void checkModelItem(){
		this.checkApp_id("版本编码");
		this.checkDevice_type("当前设备");
		this.checkApp_version("版本");
		this.checkIs_update("版本是否强制更新");
		this.checkH5_url("版本H5下载地址");
		this.checkApp_url("安装包下载地址");
		this.checkSize("安装包大小");
		this.checkQr_code_url("二维码下载地址");
		this.checkChange_content("版本更新内容");
		this.checkChannel("版本渠道");
		this.checkShare_count("版本分享次数");
		this.checkDownload_count("版本下载次数");
		this.checkPublish_date("发布日期");
		this.checkUnder_date("下架日期");

	}
	/**
	 * 获取app版本列表
	 * @param app_version
	 * @param is_update
	 * @param channel
	 * @param status
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> queryAppVersionByPage(String app_version, String is_update,String channel, String status, PageKit page){
		String sql = "select avi.seq_uuid," +
				"            avi.avi_id," +
				"            avi.app_id," +
				"            avi.device_type," +
				"            avi.app_version," +
				"            avi.is_update," +
				"            avi.publish_date," +
				"            avi.app_url," +
				"            avi.h5_url," +
				"            avi.qr_code_url," +
				"            avi.change_content," +
				"            avi.channel," +
				"            avi.under_date," +
				"            avi.create_time," +
				"            avi.status," +
				"            app.name app_name," +
				"            status.name status_show," +
				"            is_show.name is_show_name," +
				"            device_type.name deviceType_show," +
				"            is_update.name isUpdate_show," +
				"            channel.name channerl_show," +
				"            app.package_name package_name" +
				"       from phjf_app_version_info avi" +
				"            left join phjf_app_info app on app.app_id = avi.app_id " +
				"            left join sys_datalibrary status on status.parent_code = 'sys_articleStatus' and status.code = avi.status" +
				"            left join sys_datalibrary is_show on is_show.parent_code = 'sys_isShow' and is_show.code = avi.is_show" +
				"            left join sys_datalibrary device_type on device_type.parent_code = 'sys_deviceType' and device_type.code = avi.device_type" +
				"            left join sys_datalibrary is_update on is_update.parent_code = 'sys_isUpdate' and is_update.code = avi.is_update" +
				"            left join sys_datalibrary channel on channel.parent_code = 'sys_channel' and channel.code = avi.channel" +
				"      where 1=1";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(app_version)){
			sql += " and avi.app_version = ?";
			params.add(app_version);
		}
		if (F.validate.isNotEmpty(is_update)){
			sql += " and avi.is_update = ?";
			params.add(is_update);
		}
		if (F.validate.isNotEmpty(channel)){
			sql += " and avi.channel = ?";
			params.add(channel);
		}
		if (F.validate.isNotEmpty(status)){
			sql += " and avi.status = ? ";
			params.add(status);
		}
		sql += " order by avi.device_type,avi.app_id,avi.app_version asc";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	/**
	 * 通过ID获取app版本
	 * @param seq_uuid
	 * @return
	 */
	public AppVersionInfo findById(String seq_uuid){
		String sql = "select * " +
				"       from phjf_app_version_info " +
				"      where seq_uuid = ? " +
				"      limit 1";
		AppVersionInfo data = AppVersionInfo.dao.use("DBPublic").findFirst(sql,seq_uuid);
		if(F.validate.isEmpty(data)){
			data = new AppVersionInfo();
		}
		return data;
	}

	/**
	 * 通过设备和版本号获取app版本
	 * @param app_id
	 * @param device_type
	 * @param app_version
	 * @return
	 */
	public AppVersionInfo findByDeviceVersion(String app_id,String device_type, String app_version){
		String sql = "select * " +
				"       from phjf_app_version_info " +
				"      where app_id = ?" +
				"        and device_type = ? " +
				"        and app_version = ? " +
				"        and status != 3" +
				"      limit 1";
		AppVersionInfo data = AppVersionInfo.dao.use("DBPublic").findFirst(sql,app_id,device_type,app_version);
		if(F.validate.isEmpty(data)){
			data = new AppVersionInfo();
		}
		return data;
	}

	/**
	 * 获取app
	 * @return
	 */
	public AppInfo findAppInfo(){
		AppInfo appInfo = AppInfo.dao.findAppByAppId(this.getApp_id()+"");
		return appInfo;
	}

	/**
	 * 判断该版本号是否存在
	 * @param seq_uuid
	 * @param app_id
	 * @param device_type
	 * @param app_version
	 * @return
	 */
	public Boolean isHasThisVersion(String seq_uuid, String app_id,String device_type, String app_version){
		String sql = "select * " +
				"       from phjf_app_version_info " +
				"      where seq_uuid != ? " +
				"        and app_id = ?" +
				"        and device_type = ? " +
				"        and app_version = ? " +
				"        and status != 3" +
				"      limit 1";
		AppVersionInfo data = AppVersionInfo.dao.use("DBPublic").findFirst(sql,seq_uuid,app_id,device_type,app_version);
		if(F.validate.isEmpty(data)){
			return false;
		}
		return true;
	}
}

package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.framework.core.util.DataLoader;
import com.bankwel.framework.support.codis.RedisClient;
import com.bankwel.phjf_admin.common.constants.admin.AdminConstants;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheSysSensitivewordsLibrary;
import com.bankwel.phjf_baseModel.common.model.phjf.enumKey.AdminSysSensitiveWordsLibraryEnum;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class SysSensitivewordsLibrary extends CacheSysSensitivewordsLibrary<SysSensitivewordsLibrary> {
	public static final SysSensitivewordsLibrary dao = new SysSensitivewordsLibrary().dao();

	/** 
	 * @Title:
	 * @Description: 获取敏感词 对象
	 * @author: DukeMr.Chen
	 */
	public SysSensitivewordsLibrary findCacheById(final String language, final String sw_id){
		SysSensitivewordsLibrary data = RedisClient.getClient().get(F.strKit.f(AdminSysSensitiveWordsLibraryEnum.CK_Phjf_Model_SysSensitiveWordsLibrary_KEY3.getKey(), language, sw_id)
				, AdminSysSensitiveWordsLibraryEnum.CK_Phjf_Model_SysSensitiveWordsLibrary_KEY3.getTime()
				, SysSensitivewordsLibrary.class
				, new DataLoader(){
			public Object load() throws  Exception{
				return SysSensitivewordsLibrary.dao.findById(sw_id);
			}
		});
		if(F.validate.isEmpty(data)) {
			data = new SysSensitivewordsLibrary();
		}
		return data;
	}

	/**
	 * @Title:
	 * @Description: 主键分页
	 * @author: DukeMr.Chen
	 */
	public Pair<List<Record>,PageKit<Record>> queryIdByPage(final String language, final String words, final String status, PageKit page) {
		ArrayList<Record> _ids = RedisClient.getClient().get(F.strKit.f(AdminSysSensitiveWordsLibraryEnum.CK_Phjf_Model_SysSensitiveWordsLibrary_KEY2.getKey(), language, status, words)
				, AdminSysSensitiveWordsLibraryEnum.CK_Phjf_Model_SysSensitiveWordsLibrary_KEY2.getTime()
				, new DataLoader(){
			public Object load() throws  Exception{
				String sql = "select mp.sw_id " +
						"       from sys_sensitiveWords_library mp" +
						"        where 1 = 1 ";
				List params = new ArrayList();
				if (F.validate.isNotEmpty(language)){
					sql += " and mp.language = ? ";
					params.add(language);
				}
				if (F.validate.isNotEmpty(words)){
					sql += " and mp.words = ? ";
					params.add(words);
				}
				if (F.validate.isNotEmpty(status)){
					sql += " and mp.status = ? ";
					params.add(status);
				}
				sql += " order by mp.sw_id ";
				return Db.use("DBPublic").find(sql, params.toArray());
			}
		});
		if(F.validate.isEmpty(_ids)) {
			_ids = new ArrayList<Record>();
		}
		//分页计算
		PageKit<Record> pageTwo = new PageKit<Record>(page.getNowPage(),_ids, page.getRowsPerPage());
		java.util.List<Record> selectIds = pageTwo.calcPagelist(_ids);
		return Pair.of(selectIds, pageTwo);
	}

	/**
	 * @Title:
	 * @Description:  查询敏感词 根据敏感词
	 * @author: DukeMr.Chen
	 */
	public SysSensitivewordsLibrary findObjectByWords(final String language, final String words){
		String sql = "SELECT * FROM sys_sensitiveWords_library where words = ? and `language` = ?";
		return SysSensitivewordsLibrary.dao.use("DBPublic").findFirst(sql, words, language);
	}

	/**
	 * @Title:
	 * @Description: 获取所有的敏感词
	 * @author: DukeMr.Chen
	 */
	public List<Record> getAllSensitiveWords(String language){
		String sql = "select mp.words " +
				"       from sys_sensitiveWords_library mp" +
				"      where 1 = 1 " +
				"        and mp.status = '1' " +
				"        and mp.language = ? " +
				"   order by mp.sw_id ";

		return Db.use("DBPublic").find(sql, language);
	}

	/**
	 * @Title:
	 * @Description: 批量添加
	 * @author: DukeMr.Chen
	 */
	public void addBatch(AuthOperator opt, String language, List<SysSensitivewordsLibrary> sensitiveWordsList) {
		String sql = "insert into sys_sensitiveWords_library(seq_uuid, words,language) values(?, ?, ?)";
		int[] result = Db.use("DBPublic").batch(sql, "seq_uuid,words,language", sensitiveWordsList, 500);
		flashCatch(this);
	}

	/** 
	 * @Title:
	 * @Description: 批量更新
	 * @author: DukeMr.Chen
	 */
	public void updateBatch(AuthOperator opt, String language, List<SysSensitivewordsLibrary> sensitiveWordsList) {
		String sql = "UPDATE sys_sensitiveWords_library set `status` = ? where seq_uuid= ?";
		int[] result = Db.use("DBPublic").batch(sql, "status,seq_uuid", sensitiveWordsList, 500);
		flashCatch(this);
	}

	/**
	 * @Title:
	 * @Description: 保存或更新
	 * @author: DukeMr.Chen
	 */
	public SysSensitivewordsLibrary saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if (F.validate.isNotEmpty(this.getSeq_uuid()) && this.getSw_id() != null){
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.update();
		} else {
			this.setSeq_uuid(UUID.randomUUID().toString());
			this.setCreate_opt(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}
	public void checkModelItem(){
		this.checkSw_id("敏感词序号");
		this.checkWords("敏感词");
		this.checkLanguage("语言");
		this.checkRemark("备注");
		this.checkUse_platform("敏感词使用平台");
	}
	/**
	 * @Title:
	 * @Description: 获取状态的显示
	 * @author: DukeMr.Chen
	 */
	public String getStatusShow(String language){
		language = F.validate.isNotEmpty(language) ? language : AdminConstants.ZH_SIMP;
		SysDatalibrary sysData = SysDatalibrary.dao.findSysDatalibrary(language,"sys_status", this.getStatus());
		return F.validate.isEmpty(sysData) ? "" : sysData.getName();
	}

	/**
	 * @Title:
	 * @Description: 导出敏感词
	 * @author: DukeMr.Chen
	 */
	public List<Record> bulkExportBtn(String language, String status) {
		String sql = "select mp.words " +
				"       from sys_sensitiveWords_library mp" +
				"      where 1 = 1 ";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(language)){
			sql += " and mp.language = ? ";
			params.add(language);
		}
		if (F.validate.isNotEmpty(status)){
			sql += " and mp.status = ? ";
			params.add(status);
		}
		sql += " order by mp.sw_id ";
		return Db.use("DBPublic").find(sql, params.toArray());
	}
}

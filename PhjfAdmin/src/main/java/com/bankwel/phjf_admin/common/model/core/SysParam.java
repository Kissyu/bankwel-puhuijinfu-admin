package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.model.core.base.BaseSysParam;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheSysParam;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class SysParam extends CacheSysParam<SysParam> {
	public static final SysParam dao = new SysParam().dao();
	/**
	 * 新增或修改系统参数
	 * @param opt
	 * @return
	 */
	public SysParam saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if (F.validate.isNotEmpty(this.getParam_id()+"")&&!(this.getParam_id().equals(0))){
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.update();
		} else {
			if (F.validate.isEmpty(this.getParam_code())){
				this.setParam_code(SysSeq.dao.generatorSysParamCode());
			}
			this.setSeq_uuid(UUID.randomUUID().toString());
			this.setIs_show("Y");
			this.setStatus("1");
			this.setCreate_opt(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}
	public void checkModelItem(){
		this.checkParam_id("系统参数标识");
		this.checkParam_code("系统参数编码");
		this.checkParam_value("参数值");
		this.checkRemark("备注");
	}
	/**
	 * 获取系统参数列表
	 * @param param_name
	 * @param status
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> querySysParamByPage(String param_name, String status, PageKit page){
		String sql = "select param.seq_uuid," +
				"            param.param_id," +
				"            param.param_code," +
				"            param.param_name," +
				"            param.param_value," +
				"            param.remark," +
				"            param.status," +
				"            param.create_time," +
				"            status.name status_show," +
				"            is_show.name is_show_name" +
				"       from sys_param param" +
				"            left join sys_datalibrary status on status.parent_code = 'sys_status' and status.code = param.status" +
				"            left join sys_datalibrary is_show on is_show.parent_code = 'sys_isShow' and is_show.code = param.is_show" +
				"      where 1=1";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(param_name)){
			sql += " and (param.param_name like concat('%',?,'%') or param.param_code = ?)";
			params.add(param_name);
			params.add(param_name);
		}
		if (F.validate.isNotEmpty(status)){
			sql += " and param.status = ? ";
			params.add(status);
		}
		sql += " order by param.create_time desc";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	/**
	 * 通过ID获取系统参数
	 * @param seq_uuid
	 * @return
	 */
	public SysParam findById(String seq_uuid){
		String sql = "select * " +
				"       from sys_param " +
				"      where seq_uuid = ? " +
				"      limit 1";
		SysParam data = SysParam.dao.use("DBPublic").findFirst(sql,seq_uuid);
		if(F.validate.isEmpty(data)){
			data = new SysParam();
		}
		return data;
	}

	/**
	 * 通过参数名称获取系统参数
	 * @param param_name
	 * @return
	 */
	public SysParam findByName(String param_name){
		String sql = "select * " +
				"       from sys_param " +
				"      where param_name = ? " +
				"        and status = 1" +
				"      limit 1";
		SysParam data = SysParam.dao.use("DBPublic").findFirst(sql,param_name);
		if(F.validate.isEmpty(data)){
			data = new SysParam();
		}
		return data;
	}
	/**
	 * 通过参数值获取系统参数
	 * @param param_value
	 * @return
	 */
	public SysParam findByValue(String param_value){
		String sql = "select * " +
				"       from sys_param " +
				"      where param_value = ?" +
				"        and status = 1" +
				"      limit 1";
		SysParam data = SysParam.dao.use("DBPublic").findFirst(sql,param_value);
		if(F.validate.isEmpty(data)){
			data = new SysParam();
		}
		return data;
	}

	/**
	 * 修改前判断该系统参数名是否存在
	 * @param seq_uuid
	 * @param param_name
	 * @return
	 */
	public Boolean isHaveParamName(String seq_uuid,String param_name){
		String sql = "select * " +
				"       from sys_param " +
				"      where seq_uuid !=? " +
				"        and param_name = ?" +
				"        and status = 1 ";
		SysParam data = SysParam.dao.use("DBPublic").findFirst(sql,seq_uuid,param_name);
		if(F.validate.isEmpty(data)){
			return false;
		}
		return true;
	}
	/**
	 * 修改前判断该系统参数值是否存在
	 * @param seq_uuid
	 * @param param_value
	 * @return
	 */
	public Boolean isHaveParamValue(String seq_uuid,String param_value){
		String sql = "select * " +
				"       from sys_param " +
				"      where seq_uuid !=? " +
				"        and param_value = ?" +
				"        and status = 1 ";
		SysParam data = SysParam.dao.use("DBPublic").findFirst(sql,seq_uuid,param_value);
		if(F.validate.isEmpty(data)){
			return false;
		}
		return true;
	}

	public SysParam findByCode(String param_code){
		String sql = "select * " +
				"       from sys_param " +
				"      where param_code = ? " +
				"        and status = '1' " +
				"      limit 1 ";
		SysParam sysParam = dao.use("DBPublic").findFirst(sql, param_code);
		if (F.validate.isEmpty(sysParam)){
			sysParam = new SysParam();
		}
		return sysParam;
	}

	/**
	 * 检验业务对象是否为空
	 * @return
	 */
	public boolean isEmpty(){
		if(F.validate.isEmpty(this.getSeq_uuid())){
			return true;
		}
		return false;
	}
}

package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.phjf_admin.common.model.core.base.BaseAuthBranchApply;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheAuthBranchApply;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AuthBranchApply extends CacheAuthBranchApply<AuthBranchApply> {
	public static final AuthBranchApply dao = new AuthBranchApply().dao();

	public AuthBranchApply saveOrUpdate(AuthBranchApply branchApply){
		if (F.validate.isEmpty(branchApply.getSeq_id())){
			branchApply.save();
		} else {
			branchApply.update();
		}
		flashCatch(branchApply);
		return branchApply;
	}

	public List<Record> queryListByBranchId(String branch_seq_id){
		String sql = "select ac.seq_id " +
				"            , ac.`name` " +
				"            , ba.seq_id branch_apply_seq_id " +
				"       from sys_apply_center ac " +
				"            left join auth_branch_apply ba on ba.apply_center_seq_id = ac.seq_id and ba.status = '1' and ba.branch_seq_id = ?";
		return Db.use("DBPublic").find(sql, branch_seq_id);
	}

	public AuthBranchApply findBranchApplyBySeqId(String seq_id){
		String sql = "select * " +
				"       from auth_branch_apply " +
				"      where seq_id = ? " +
				"      limit 1 ";
		AuthBranchApply branchApply = dao.use("DBPublic").findFirst(sql, seq_id);
		if (F.validate.isEmpty(branchApply)){
			branchApply = new AuthBranchApply();
		}
		return branchApply;
	}

	public void deleteByBranchSeqId(String branch_seq_id){
		String sql = "update ";
	}
}

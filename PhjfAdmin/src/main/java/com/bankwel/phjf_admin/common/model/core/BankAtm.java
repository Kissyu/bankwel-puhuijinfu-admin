package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.GeoHashKit;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.constants.admin.AdminConstants;
import com.bankwel.phjf_admin.common.model.core.base.BaseBankAtm;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheBankAtm;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;
import sun.misc.Cache;

import java.util.*;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class BankAtm extends CacheBankAtm<BankAtm> {
	public static final BankAtm dao = new BankAtm().dao();
    private BankInfo bankInfo;
    /**
     * 保存或更新ATM
     * @param opt
     * @return
     */
    public BankAtm saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
        this.checkModelItem();
        this.setGeohash(GeoHashKit.encode(this.getLat(),this.getLng()));
        if (F.validate.isNotEmpty(this.getBank_atm_id()+"")&&!(this.getBank_atm_id().equals(0))){
            this.setModify_opt(opt.getSeq_id()+"");
            this.setModify_time(new Date());
            this.update();
        } else {
            if (F.validate.isEmpty(this.getBank_atm_id())||this.getBank_atm_id().equals(0)){
                this.setAtm_code(SysSeq.dao.generatorATMCode());
            }
            this.setSeq_uuid(UUID.randomUUID().toString());
            this.setIs_show("Y");
            this.setStatus("1");
            this.setCreate_opt(opt.getSeq_id()+"");
            this.setCreate_time(new Date());
            this.setModify_opt(opt.getSeq_id()+"");
            this.setModify_time(new Date());
            this.save();
        }
        flashCatch(this);
        return this;
    }
    public void checkModelItem() {
        this.checkBank_code("银行网点编码");
        this.checkLanguage("语言");
        this.checkBt_code("所属银行编码");
        this.checkAtm_code("ATM编码");
        this.checkName("银行ATM名称");
        this.checkLat("银行网点所在纬度");
        this.checkLng("银行网点所在经度");
        this.checkContact("银行网点联系人");
        this.checkAddress("银行网点地址");
        this.checkEmail("银行网点邮箱");
        this.checkTelephone("银行网点固定电话");
        this.checkMobilephone("银行网点移动电话");
        this.checkRemark("银行网点备注");
    }
    /**
     * 通过办理点名称获取办理点
     * @param name
     * @return
     */
    public BankAtm findByMapName(String name){
        String sql = "select * " +
                "       from phjf_bank_atm " +
                "      where name = ? " +
                "        and status = 1 ";
        return BankAtm.dao.use("DBPublic").findFirst(sql,name);
    }

    /**
     * 判断该ATM名称是否存在
     * @param seq_uuid
     * @param name
     * @return
     */
    public Boolean isHaveATMName(String seq_uuid,String name){
        String sql = "select * " +
                "       from phjf_bank_atm " +
                "      where seq_uuid != ?" +
                "        and name = ? " +
                "        and status = 1 ";
        BankAtm atm = BankAtm.dao.use("DBPublic").findFirst(sql,seq_uuid,name);
        if(F.validate.isEmpty(atm)){
            return false;
        }
        return true;
    }

    public BankAtm findByUuid(String seq_uuid){
        String sql = "select * " +
                "       from phjf_bank_atm " +
                "      where seq_uuid = ?" ;
        BankAtm atm = BankAtm.dao.use("DBPublic").findFirst(sql,seq_uuid);
        if(F.validate.isEmpty(atm)){
            return new BankAtm();
        }
        return atm;
    }

    /**
     * ATM列表
     * @param status
     *@param page  @return
     */
    public Pair<List<Record>,PageKit<Record>> queryBankATMByPage(String name, String status, String isConfirm, PageKit page){
        String sql = "select pba.seq_uuid," +
                "pba.bank_atm_id," +
                "pba.third_atm_code," +
                "pba.bt_code," +
                "bt.name bt_name," +
                "pba.bank_code," +
                "pbf.`name` as bank_name," +
                "pba.atm_code," +
                "pba.`name`," +
                "pba.lat," +
                "pba.lng," +
                "pba.contact," +
                "pba.address," +
                "pba.email," +
                "pba.telephone," +
                "pba.mobilephone," +
                "pba.remark," +
                "lib1.`name` as `status_show`," +
                "pba.`status`, " +
                "lib2.`name` as `is_show`," +
                "pba.`is_confirm`, " +
                "isConfirm.name isConfirm_show," +
                "pba.create_time," +
                "pba.modify_time " +
                "from phjf_bank_atm pba " +
                "left join phjf_bank_type bt on pba.bt_code = bt.bt_code and bt.language = pba.language " +
                "left join sys_datalibrary lib1 on lib1.parent_code = 'sys_status' and lib1.code = pba.`status` " +
                "left join sys_datalibrary lib2 on lib2.parent_code = 'sys_isShow' and lib2.code = pba.is_show " +
                "LEFT JOIN phjf_bank_info pbf on pba.bank_code = pbf.bank_code " +
                "left join sys_datalibrary isConfirm on isConfirm.parent_code = 'sys_isConfirm' and isConfirm.code = pba.is_confirm " +
                "where 1=1 ";
        List params = new ArrayList();

        if (F.validate.isNotEmpty(name)){
            sql += " and (pba.name LIKE concat('%',?,'%') or pba.atm_code = ?) ";
            params.add(name);
            params.add(name);
        }

        if (F.validate.isNotEmpty(status)){
            sql += " and pba.status = ? ";
            params.add(status);
        }
        if (F.validate.isNotEmpty(isConfirm)){
            sql += " and pba.is_confirm = ? ";
            params.add(isConfirm);
        }
        sql += " order by pba.create_time desc";
        return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
    }

    /**
     * ATM管理 - 输出ATM信息
     * @param model
     * @return
     * @throws MsgBusinessException
     */
    public  Map outputBankATMInfo(BankAtm model) throws MsgBusinessException {
        bankInfo = model.findBankInfo();
        Map data = F.transKit.asMap(
                "seq_uuid",model.getSeq_uuid()
                ,"atm_id",model.getBank_atm_id()
                ,"atm_code",model.getAtm_code()
                ,"third_atm_code",model.getThird_atm_code()
                ,"language",model.getLanguage()
                ,"language_show",model.findLanguage_show()
                ,"name",model.getName()
                ,"bank_code",bankInfo.getBank_code()
                ,"bank_code_check",bankInfo.isEmpty()+""
                ,"bank_name",bankInfo.getName()
                ,"contact",model.getContact()
                ,"mobilephone",model.getMobilephone()
                ,"telephone",model.getTelephone()
                ,"bank_code",model.getBank_code()
                ,"bt_code",model.getBt_code()
                ,"bt_name",model.getBtName()
                ,"address",model.getAddress()
                ,"lat",model.getLat()
                ,"lng",model.getLng()
                ,"remark",model.getRemark()
                ,"is_show",model.getIs_show()
                ,"is_confirm",model.getIs_confirm()
                ,"status",model.getStatus()
                ,"create_time",model.getCreate_time());
        return data;
    }

    private String getBtName() {
        return BankType.dao.findByCode(this.getBt_code(),this.getLanguage()).getName();
    }

    /**
     * 获取银行机构
     * @return
     */

    public BankInfo findBankInfo(){
        if (F.validate.isEmpty(bankInfo)){
            bankInfo = BankInfo.dao.findBankInfo(this.getBank_code(), AdminConstants.LanguageType.ZH_SIMP.value);
        }
        return bankInfo;
    }
    /**
     * 获取语言的中文名
     * @return
     */
    public String findLanguage_show(){
        SysDatalibrary library = SysDatalibrary.dao.queryDatalibrary("Phjf", "sys_language", this.getLanguage());
        return library.getName();
    }
}

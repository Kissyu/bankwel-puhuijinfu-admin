package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.phjf_admin.common.model.core.base.BaseAuthOperatorAuth;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheAuthOperatorAuth;

import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AuthOperatorAuth extends CacheAuthOperatorAuth<AuthOperatorAuth> {
	public static final AuthOperatorAuth dao = new AuthOperatorAuth().dao();

	public List<AuthOperatorAuth> findByIds(final String operator_seq_id, final String branch_seq_id) {
		String sql = " select aoa.* " +
				"        from auth_operator_auth aoa " +
				"            ,auth_operator ao  " +
				"            ,auth_branch abr  " +
				"       where aoa.operator_seq_id = ao.seq_id " +
				"         and aoa.branch_seq_id = abr.seq_id " +
				"         and aoa.operator_seq_id = ? " +
				"         and aoa.branch_seq_id = ? " +
				"         and aoa.status = 1 ";
		return AuthOperatorAuth.dao.use("DBPublic").find(sql,operator_seq_id,branch_seq_id);
	}
	public void deleteOpAuthById(String seq_uuid){
		AuthOperatorAuth aoa = AuthOperatorAuth.dao.getAoAById(seq_uuid);
		aoa.setStatus("4");
		aoa.update();
	}

	public AuthOperatorAuth saveOrUpdate(final String user_id,final String operator_seq_id, final String branch_seq_id, final String roleId,final String apply_id){

		AuthOperatorAuth model = new AuthOperatorAuth();
		model.setSeq_uuid(UUID.randomUUID().toString());
		model.setOperator_seq_id(Integer.valueOf(operator_seq_id));
		model.setBranch_seq_id(Integer.valueOf(branch_seq_id));
		model.setRole_seq_id(Integer.valueOf(roleId));
		model.setApply_center_seq_id(Integer.valueOf(apply_id));
		model.setCreate_opt(Integer.valueOf(user_id));
		model.setModify_opt(Integer.valueOf(user_id));
		model.save();
		flashCatch(this);
		return model;
	}
	public AuthOperatorAuth getAoAById(String uuid) {
		String sql = "SELECT * " +
				"       FROM auth_operator_auth " +
				"       where seq_uuid = ? " +
				"         and status = 1 " +
				"       limit 1";
		return AuthOperatorAuth.dao.use("DBPublic").findFirst(sql,uuid);
	}
	public AuthOperatorAuth findAOAByRoleId(String role_seq_id){
		String sql = "select * " +
				"       from auth_operator_auth " +
				"       where role_seq_id = ? " +
				"         and status = 1 " +
				"       limit 1";
		return AuthOperatorAuth.dao.use("DBPublic").findFirst(sql,role_seq_id);
	}

	public AuthOperatorAuth findByApplySeqId(String apply_center_seq_id, String branch_seq_id){
		String sql = "select * " +
				"       from auth_operator_auth " +
				"      where apply_center_seq_id = ? " +
				"        and branch_seq_id = ? " +
				"        and status = 1 " +
				"      limit 1 ";
		AuthOperatorAuth operatorAuth = AuthOperatorAuth.dao.use("DBPublic").findFirst(sql, apply_center_seq_id, branch_seq_id);
		if (F.validate.isEmpty(operatorAuth)){
			operatorAuth = new AuthOperatorAuth();
		}
		return operatorAuth;
	}
}

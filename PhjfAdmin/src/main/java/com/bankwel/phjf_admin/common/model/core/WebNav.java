package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.framework.support.jfinal.TTx;
import com.bankwel.phjf_admin.common.model.core.base.BaseWebNav;
import com.bankwel.phjf_admin.component.c13webtag.bootstrap.DynamicSelectData;
import com.bankwel.phjf_admin.component.c13webtag.bootstrap.IDynamicSelectData;
import com.bankwel.phjf_admin.webapi.vo.ManagepointInfoVO;
import com.bankwel.phjf_admin.webapi.vo.WebNavVO;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheWebNav;
import com.jfinal.aop.Before;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class WebNav extends CacheWebNav<WebNav> {
	public static final WebNav dao = new WebNav().dao();

	/**
	 * 获取导航列表
	 * @param language
	 * @param name
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> queryNavByPage(String language, String name,String status, PageKit page){
		String sql = "select nav.seq_uuid," +
				"            nav.nav_id," +
				"            nav.nav_code," +
				"            nav.nav_name," +
				"            nav.nav_path," +
				"            nav.parent_nav_code," +
				"            nav.url," +
				"            nav.language , " +
				"            nav.status , " +
				"            nav.orders , " +
				"            nav.create_time," +
				"            status.name status_show," +
				"            isShow.name is_show_name," +
				"            nav1.nav_name p_name " +
				"       from phjf_web_nav nav" +
				"       left join phjf_web_nav nav1 on nav1.nav_code = nav.parent_nav_code  " +
				"       left join sys_datalibrary isShow on isShow.parent_code = 'sys_isShow' and isShow.code = nav.is_show  " +
				"       left join sys_datalibrary status on status.parent_code = 'sys_status' and status.code = nav.status  " ;
				List params = new ArrayList();
		if (F.validate.isNotEmpty(language)){
			sql += " where nav.language = ? ";
			params.add(language);
		}
		if (F.validate.isNotEmpty(name)){
			sql += " and nav.nav_name LIKE concat('%',?,'%') ";
			params.add(name);
		}
		if (F.validate.isNotEmpty(status)){
			sql += " and nav.status = ? ";
			params.add(status);
		}
		sql += "  order by nav.orders ";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}
	/**
	 * 通过导航名称获取导航
	 * @param name
	 * @return
	 */
	public WebNav findByNavName(String name){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where nav_name = ? " +
				"        and status = 1 ";
		return WebNav.dao.use("DBPublic").findFirst(sql,name);
	}
	/**
	 * 通过导航编码获取导航路径
	 * @return
	 */
	public WebNav findParentNavpath(String language,String p_nav_code){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where language = ?" +
				"        and nav_code = ? " +
				"        and status = 1 ";
		return WebNav.dao.use("DBPublic").findFirst(sql,language,p_nav_code);
	}

	/**
	 * 保存或更新导航
	 * @param opt
	 * @return
	 */
	public WebNav saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if (F.validate.isNotEmpty(this.getNav_id())&&!(this.getNav_id().equals(0))){
			this.setModify_user(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.update();
		} else {
			if (F.validate.isEmpty(this.getNav_code())){
				this.setNav_code(SysSeq.dao.generatorWebNavCode());
			}
			this.setSeq_uuid(UUID.randomUUID().toString());
			this.setIs_show("Y");
			this.setStatus("1");
			this.setCreate_user(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_user(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}
	public void checkModelItem(){
		this.checkNav_id("导航ID标识");
		this.checkNav_name("导航名称");
		this.checkNav_code("导航编码");
		this.checkLanguage("语言");
		this.checkParent_nav_code("上级导航code");
		this.checkNav_path("导航层级路径");
		this.checkUrl("导航访问路径");
	}
	/**
	 * 判断该导航名称是否存在
	 * @param seq_uuid
	 * @param name
	 * @return
	 */
	public Boolean isHaveNavName(String seq_uuid,String name){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where seq_uuid != ?" +
				"        and nav_name = ? " +
				"        and status = 1 ";
		WebNav mp = WebNav.dao.use("DBPublic").findFirst(sql,seq_uuid,name);
		if(F.validate.isEmpty(mp)){
			return false;
		}
		return true;
	}
	/**
	 * 通过ID获取导航
	 * @param seq_uuid
	 * @return
	 */
	public WebNav findByNavId(String seq_uuid){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where seq_uuid = ? " +
				"      limit 1";
		WebNav data = WebNav.dao.use("DBPublic").findFirst(sql,seq_uuid);
		if(F.validate.isEmpty(data)){
			data = new WebNav();
		}
		return data;
	}

	/**
	 * 获取语言的中文名
	 * @return
	 */
	public String findLanguage_show(){
		SysDatalibrary library = SysDatalibrary.dao.queryDatalibrary("Phjf", "sys_language", this.getLanguage());
		return library.getName();
	}

	/**
	 * 获取导航
	 * @param nav_code
	 * @param language
	 * @return
	 */
	public WebNav findNavByCode(String nav_code, String language) {
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where nav_code = ? " +
				"        and language = ? " +
				"        and status = 1 " +
				"      limit 1 ";
		WebNav data = WebNav.dao.use("DBPublic").findFirst(sql, nav_code, language);
		return data;
	}
	/**
	 * 通过nav_path获取导航
	 * @param nav_path
	 * @return
	 */
	public List<WebNav> findByNavPath(String nav_path){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where nav_path LIKE concat(?,'%') " +
				"        and status = 1" +
				"        and is_show = 'Y'  ";
		return WebNav.dao.use("DBPublic").find(sql,nav_path);
	}
	public List<IDynamicSelectData> querySelectData(String language){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where parent_nav_code = 0 " +
				"        and is_show = 'Y'" +
				"        and language = ? " +
				"        and status = '1' ";
		List<WebNav> list = dao.use("DBPublic").find(sql,language);
		List<IDynamicSelectData> selectData = new ArrayList<IDynamicSelectData>();
		for (WebNav nav : list){
			IDynamicSelectData sd = new DynamicSelectData();
			sd.setId(nav.getNav_code());
			sd.setName(nav.getNav_name());
			selectData.add(sd);
		}
		return selectData;
	}

	public List<WebNav> queryAll(String language){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where parent_nav_code = 0 " +
				"        and is_show = 'Y'" +
				"        and language = ? " +
				"        and status = '1' ";
		List<WebNav> list = dao.use("DBPublic").find(sql,language);
		return list;
	}
	/**
	 * 获取导航编码
	 * @return
	 */
	public WebNav findNavCodeByUri(String language,String url){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where language = ? " +
				"        and url = ? " +
				"        and status = 1" +
				"        and is_show = 'Y' ";
		return WebNav.dao.use("DBPublic").findFirst(sql,language,url);
	}
	/**
	 * 获取导航列表
	 * @return
	 */
	public List<WebNav> queryTopNavs(String language,String parent_nav_code){
		String sql = "select * " +
				"       from phjf_web_nav " +
				"      where language = ? " +
				"        and parent_nav_code = ? " +
				"        and is_show = 'Y'" +
				"        and status = '1' order by orders ";
		return WebNav.dao.use("DBPublic").find(sql,language,parent_nav_code);
	}
}

package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.constants.admin.AdminConstants;
import com.bankwel.phjf_admin.common.model.core.base.BaseManagepointBank;
import com.bankwel.phjf_admin.common.util.RansomCodeUtil;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheManagepointBank;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ManagepointBank extends CacheManagepointBank<ManagepointBank> {
	public static final ManagepointBank dao = new ManagepointBank().dao();

	private ManagepointInfo managepointInfo;
	private BankInfo bankInfo;

	/**
	 * 保存或修改办理点银行
	 * @param opt
	 * @return
     */
	public ManagepointBank saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if (this.getSeq_uuid() != null){
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.update();
		} else {
			this.setSeq_uuid(UUID.randomUUID().toString());
			this.setIs_show("Y");
			this.setStatus("1");
			this.setCreate_opt(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}
	public void checkModelItem() {
		this.checkMb_id("办理点编码");
		this.checkMp_code("可办理银行类型编码");
		this.checkBank_code("可办理银行网点编码");
		this.checkIs_open_account("是否预约开户");
		this.checkStart_date("办理点业务建立日期");
		this.checkEnd_date("办理点业务终止日期");
		this.checkRemark("备注");
	}
	/**
	 * 办理点银行查询
	 * @param mp_name
	 * @param bank_name
	 * @param page
     * @return
     */
	public Pair<List<Record>,PageKit<Record>> queryManagepointByPage(String mp_name, String bank_name, String is_open_account, String language, PageKit page){
		String sql = "select mpBank.seq_uuid " +
				"            ,mpBank.mp_code " +
				"            ,mp.name mp_name " +
				"            ,mpBank.bank_code " +
				"            ,bank.name bank_name " +
				"            ,isOpen.name is_open_account_show " +
				"            ,mpBank.start_date " +
				"            ,mpBank.end_date " +
				"            ,status.name status_show " +
				"            ,isShow.name is_show " +
				"            ,mpBank.create_time " +
				"       from phjf_managepoint_bank mpBank" +
				"            left join phjf_managepoint_info mp on mp.mp_code = mpBank.mp_code and mp.status = '1' and mp.language = ? " +
				"            left join phjf_bank_info bank on bank.bank_code = mpBank.bank_code and bank.status = '1' and mp.language = ? " +
				"            left join sys_datalibrary isOpen on isOpen.parent_code = 'is_open_account' and isOpen.code = mpBank.is_open_account " +
				"            left join sys_datalibrary status on status.parent_code = 'sys_status' and status.code = mpBank.status " +
				"            left join sys_datalibrary isShow on isShow.parent_code = 'sys_isShow' and isShow.code = mpBank.is_show " +
				"      where 1 = 1 ";
		List params = new ArrayList();
		params.add(language);
		params.add(language);
		if (F.validate.isNotEmpty(mp_name)){
			sql += " and (mp.name like concat('%',?,'%') or mp.mp_code = ?)";
			params.add(mp_name);
			params.add(mp_name);
		}
		if (F.validate.isNotEmpty(bank_name)){
			sql += " and (bank.name LIKE concat('%',?,'%') or bank.bank_code = ?) ";
			params.add(bank_name);
			params.add(bank_name);
		}
		if (F.validate.isNotEmpty(is_open_account)){
			sql += " and is_open_account = ? ";
			params.add(is_open_account);
		}
		sql += " order by mpBank.create_time desc";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	/**
	 * 通过ID获取办理点银行信息
	 * @param seq_uuid
	 * @return
     */
	public ManagepointBank findById(String seq_uuid){
		String sql = "select * " +
				"       from phjf_managepoint_bank " +
				"      where seq_uuid = ? ";
		ManagepointBank data = dao.use("DBPublic").findFirst(sql, seq_uuid);
		if (F.validate.isEmpty(data)){
			data = new ManagepointBank();
		}
		return data;
	}

	/**
	 * 办理点银行是否存在
	 * @param mp_code
	 * @param bank_code
     * @return
     */
	public boolean findByMpCodeAndBankCode(String mp_code, String bank_code){
		String sql = "select * " +
				"       from phjf_managepoint_bank " +
				"      where mp_code = ? " +
				"        and bank_code = ? ";
		ManagepointBank mpBank = dao.use("DBPublic").findFirst(sql, mp_code, bank_code);
		if (F.validate.isEmpty(mpBank)){
			return true;
		}
		return false;
	}


	/**
	 * 获取办理点
	 * @return
     */
	public ManagepointInfo findManagepoint(){
		if (F.validate.isEmpty(managepointInfo)){
			managepointInfo = ManagepointInfo.dao.findManagepoint(this.getMp_code(), AdminConstants.LanguageType.ZH_SIMP.value);
		}
		return managepointInfo;
	}

	/**
	 * 获取银行
	 * @return
     */
	public BankInfo findBank(){
		if (F.validate.isEmpty(bankInfo)){
			bankInfo = BankInfo.dao.findByCode(this.getBank_code(), AdminConstants.LanguageType.ZH_SIMP.value);
		}
		return bankInfo;
	}
}

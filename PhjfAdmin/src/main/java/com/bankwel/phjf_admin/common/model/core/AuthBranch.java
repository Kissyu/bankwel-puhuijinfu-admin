package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.model.core.base.BaseAuthBranch;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheAuthBranch;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AuthBranch extends CacheAuthBranch<AuthBranch> {
	public static final AuthBranch dao = new AuthBranch().dao();
	private AuthBranch branch = null;

	public AuthBranch saveOrUpdate(AuthBranch model){
		if (model.getSeq_uuid() != null){
			model.update();
		} else {
			model.setSeq_uuid(UUID.randomUUID().toString());
			model.save();
		}
		flashCatch(model);
		return model;
	}

	public AuthBranch findByUuid(final String seq_uuid) {
		String sql = "select * " +
				"       from auth_branch " +
				"      where seq_uuid = ? " +
				"        and status = 1 " +
				"      limit 1 ";
		AuthBranch branch = AuthBranch.dao.use("DBPublic").findFirst(sql,seq_uuid);
		if(F.validate.isEmpty(branch)){
			branch = new AuthBranch();
		}
		return branch;
	}

	public AuthBranch findById(final String seq_id) {
		String sql = "select * " +
				"       from auth_branch " +
				"      where seq_id = ? " +
				"        and status = 1 " +
				"      limit 1 ";
		AuthBranch branch = AuthBranch.dao.use("DBPublic").findFirst(sql,seq_id);
		if(F.validate.isEmpty(branch)){
			branch = new AuthBranch();
		}
		return branch;
	}

	public List<AuthBranch> findAll() {
		String sql = "select * " +
				"       from auth_branch " +
				"      where status = 1 ";
		return AuthBranch.dao.use("DBPublic").find(sql);
	}

	public List<AuthBranch> queryOptBranchList(AuthOperator user,String branch_seq_id){
		AuthOperator operator = AuthOperator.dao.getOperatorBySeqId(user.getSeq_id()+"");
		String sql = "";
		List params = new ArrayList();
		if(!operator.getOpt_type().equals("normal")){
			sql = "select * " +
				"       from auth_branch " +
				"      where status = 1 ";
		}else{
			String treepath = AuthBranch.dao.findById(branch_seq_id).getTreepath();
			sql = "select * " +
				"       from auth_branch " +
				"      where status = 1 " +
				"        and treepath LIKE concat('%',?,'%')";
			params.add(treepath);
		}
		return AuthBranch.dao.use("DBPublic").find(sql,params.toArray());
	}

	public void deleteBranchById(String seq_uuid){
		AuthBranch abr = AuthBranch.dao.findByUuid(seq_uuid);
		abr.setStatus("4");
		abr.update();
		List<AuthBranch> _pIdList = AuthBranch.dao.findByParentId(abr.getSeq_id());
		if(F.validate.isNotEmpty(_pIdList)){
			for(AuthBranch authBra : _pIdList){
				AuthBranch ab = AuthBranch.dao.findByUuid(authBra.getSeq_uuid());
				ab.setStatus("4");
				ab.update();
				flashCatch(ab);
			}
		}

	}

	public List<AuthBranch> findByParentId(final int parent_seq_id) {
		String sql = "select * " +
				"       from auth_branch " +
				"      where parent_seq_id = ? " +
				"        and status = 1 ";
		return AuthBranch.dao.use("DBPublic").find(sql,parent_seq_id);
	}

	public Pair<List<Record>,PageKit<Record>> queryAuthBranchByPage(AuthBranch model,  PageKit page){
		String sql = "select ab.seq_id " +
				"            , ab.seq_uuid" +
				"            , branch.name parent_name " +
				"            , ab.name " +
				"            , ab.abbr_name " +
				"            , ab.parent_seq_id " +
				"            , ab.level " +
				"            , ab.order_no " +
				"            , ab.address " +
				"            , ab.treepath " +
				"            , ab.apply_center_seq_id " +
				"       from auth_branch ab" +
				"            left join auth_branch branch  on ab.parent_seq_id = branch.seq_id " +
				"      where ab.status = 1 ";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(model.getName())){
			sql += " and name LIKE concat('%',?,'%') ";
			params.add(model.getName());
		}
		if (F.validate.isNotEmpty(model.getTreepath())){
			sql += " and treepath LIKE concat('%',?,'%') ";
			params.add(model.getTreepath());
		}
		sql += " order by treepath ASC ";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	public AuthBranch findBranch(){
		if (F.validate.isEmpty(this.branch)){
			this.branch = AuthBranch.dao.findById(""+this.getParent_seq_id());
		}
		return branch;
	}
}

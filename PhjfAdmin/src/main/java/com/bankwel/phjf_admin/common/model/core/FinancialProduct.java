package com.bankwel.phjf_admin.common.model.core;

import com.bankwel.framework.core.F;
import com.bankwel.framework.core.excep.MsgBusinessException;
import com.bankwel.framework.core.kit.JFinalDbKit;
import com.bankwel.framework.core.kit.PageKit;
import com.bankwel.phjf_admin.common.model.core.base.BaseFinancialProduct;
import com.bankwel.phjf_baseModel.common.model.phjf.CacheFinancialProduct;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class FinancialProduct extends CacheFinancialProduct<FinancialProduct> {
	public static final FinancialProduct dao = new FinancialProduct().dao();

	/**
	 * 新增修改理财产品信息
	 * @param opt
	 * @return
	 */
	public FinancialProduct saveOrUpdate(AuthOperator opt) throws MsgBusinessException{
		this.checkModelItem();
		if (F.validate.isNotEmpty(this.getFp_id()+"")&&!(this.getFp_id().equals(0))){
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.update();
		} else {
			this.setSeq_uuid(UUID.randomUUID().toString());
			this.setIs_show("Y");
			this.setStatus("1");
			this.setCreate_opt(opt.getSeq_id()+"");
			this.setCreate_time(new Date());
			this.setModify_opt(opt.getSeq_id()+"");
			this.setModify_time(new Date());
			this.save();
		}
		flashCatch(this);
		return this;
	}
	public void checkModelItem() {
		this.checkFp_code("理财产品编码");
		this.checkFp_type("理财产品类型");
		this.checkBt_code("理财产品所属银行编码");
		this.checkName("理财产品名称");
		this.checkThird_code("理财产品第三方代码");
		this.checkCurrency("理财产品币种");
		this.checkOpen_type("理财产品申购开放类型");
		this.checkRisk_level("理财产品风险等级");
		this.checkInverate_expect_min("理财产品预期化收益上限");
		this.checkInverate_expect_max("理财产品预期化收益下限");
		this.checkInverate_actual("理财产品实际收益率");
		this.checkAmount_acc_min("理财产品单笔最低投资金额");
		this.checkAmount_acc_max("理财产品单笔最高投资金额");
		this.checkAmount_redeem_min("理财产品单笔最低赎回金额");
		this.checkAmount_redeem_max("理财产品单笔最高赎回金额");
		this.checkAmount_total_min("理财产品最低投资金额");
		this.checkAmount_total_max("理财产品最高投资金额");
		this.checkRaise_start_date("理财产品募集开始日期");
		this.checkRaise_end_date("理财产品募集结束日期");
		this.checkStart_date("理财产品本期开始日期");
		this.checkEnd_date("理财产品本期结束日期");
		this.checkTerm("理财产品期限");
		this.checkExpire_end_date("理财产品到期日期");
		this.checkThird_status("理财产品第三方产品状态");
		this.checkRemark("理财产品备注");
		this.checkShare_count("理财产品分享次数");
		this.checkClick_count("理财产品点击次数");
		this.checkBuy_count("理财产品购买次数");
		this.checkOrder_num("理财产品序号");
	}
	/**
	 * 获取理财产品信息列表
	 * @param name
	 * @param risk_level
	 * @param language
	 * @param status
	 * @param page
	 * @return
	 */
	public Pair<List<Record>,PageKit<Record>> queryFpByPage(String name,String risk_level,String language,  String status, PageKit page){
		String sql = "select fp.seq_uuid," +
				"            fp.fp_id," +
				"            fp.fp_code," +
				"            fp.name," +
				"            fp.fp_type," +
				"            fp.bt_code," +
				"            fp.third_code," +
				"            fp.currency," +
				"            fp.open_type," +
				"            fp.risk_level," +
				"            fp.inverate_expect_min," +
				"            fp.inverate_expect_max," +
				"            fp.inverate_actual," +
				"            fp.amount_acc_min," +
				"            fp.amount_acc_max," +
				"            fp.amount_redeem_min," +
				"            fp.amount_redeem_max," +
				"            fp.amount_total_min," +
				"            fp.amount_total_max," +
				"            fp.raise_start_date," +
				"            fp.raise_end_date," +
				"            fp.start_date," +
				"            fp.end_date," +
				"            fp.expire_end_date," +
				"            fp.third_status," +
				"            fp.remark," +
				"            fp.share_count," +
				"            fp.click_count," +
				"            fp.buy_count," +
				"            fp.is_recom," +
				"            fp.publish_date," +
				"            fp.under_date," +
				"            status.name status_show," +
				"            is_show.name is_show_name," +
				"            fTStatus.name tStatus_show," +
				"            openType.name openType_show," +
				"            risk_level.name risk_level_show," +
				"            fp_type.name fp_type_show," +
				"            bt.name bt_name" +
				"       from phjf_financial_product fp" +
				"            left join sys_datalibrary status on status.parent_code = 'sys_articleStatus' and status.code = fp.status" +
				"            left join sys_datalibrary is_show on is_show.parent_code = 'sys_isShow' and is_show.code = fp.is_show" +
				"            left join sys_datalibrary fTStatus on fTStatus.parent_code = 'sys_finThirdStatus' and fTStatus.code = fp.third_status" +
				"            left join sys_datalibrary openType on openType.parent_code = 'sys_finProOpenType' and openType.code = fp.open_type" +
				"            left join sys_datalibrary risk_level on risk_level.parent_code = 'sys_FinRiskLevel' and risk_level.code = fp.risk_level" +
				"            left join sys_datalibrary fp_type on fp_type.parent_code = 'fpType' and fp_type.code = fp.fp_type" +
				"            left join phjf_bank_type bt on bt.bt_code = fp.bt_code and bt.language = fp.language" +
				"      where 1=1";
		List params = new ArrayList();
		if (F.validate.isNotEmpty(language)){
			sql += " and fp.language = ? ";
			params.add(language);
		}
		if (F.validate.isNotEmpty(name)){
			sql += " and (fp.name LIKE concat('%',?,'%') or fp.fp_code = ?) ";
			params.add(name);
			params.add(name);
		}
		if (F.validate.isNotEmpty(risk_level)){
			sql += " and fp.risk_level = ? ";
			params.add(risk_level);
		}
		if (F.validate.isNotEmpty(status)){
			sql += " and fp.status = ? ";
			params.add(status);
		}
		sql += " order by fp.create_time desc";
		return JFinalDbKit.paginate(Db.use("DBPublic"), page.getNowPage(), page.getRowsPerPage(), sql, params.toArray());
	}

	/**
	 * 通过ID获取理财产品
	 * @param seq_uuid
	 * @return
	 */
	public FinancialProduct findById(String seq_uuid){
		String sql = "select * " +
				"       from phjf_financial_product " +
				"      where seq_uuid = ? " +
				"      limit 1";
		FinancialProduct data = FinancialProduct.dao.use("DBPublic").findFirst(sql,seq_uuid);
		if(F.validate.isEmpty(data)){
			data = new FinancialProduct();
		}
		return data;
	}

	/**
	 * 通过fp_code获取理财产品列表
	 * @param fp_code
	 * @return
	 */
	public List<FinancialProduct> findByFpCode(String fp_code){
		String sql = "select * " +
				"       from phjf_financial_product " +
				"      where fp_code = ? "+
				"        and status != 3 ";
		return FinancialProduct.dao.use("DBPublic").find(sql,fp_code);
	}

	/**
	 * 获取语言的中文名
	 * @return
	 */
	public String findLanguage_show(){
		SysDatalibrary library = SysDatalibrary.dao.queryDatalibrary("Phjf", "sys_language", this.getLanguage());
		return library.getName();
	}

	/**
	 * 获取银行类型名称
	 * @return
	 */
	public String findBank_name(){
		BankType bankType = BankType.dao.findByCode(this.getBt_code(), this.getLanguage());
		return bankType.getName();
	}
}
